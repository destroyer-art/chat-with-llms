import React, { useState, useEffect } from "react";
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button,
  Slider,
  Tooltip,
  Input,
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem
} from "@nextui-org/react";

export const SettingsModal = ({ isOpen, onClose }) => {
  const [temperature, setTemperature] = useState(localStorage.getItem("temperature") || 0.7);
  const [history, setHistory] = useState(localStorage.getItem("history") || 10);
  const [theme, setTheme] = useState(localStorage.getItem("theme") || 'light');

  // useEffect to set the theme based on localStorage when the component mounts
  useEffect(() => {
    const storedTheme = localStorage.getItem('theme') || 'light';
    setTheme(storedTheme);
    applyTheme(storedTheme);
  }, []);

  // Function to apply the theme to the document
  const applyTheme = (selectedTheme) => {
    const root = document.documentElement;
    console.log(`Applying theme: ${selectedTheme}`);
  
    if (selectedTheme === 'dark') {
      root.classList.add('dark');
      root.classList.remove('light');
    } else if (selectedTheme === 'system') {
      const isSystemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      console.log(`System prefers dark: ${isSystemDark}`);
      if (isSystemDark) {
        root.classList.add('dark');
        root.classList.remove('light');
      } else {
        root.classList.remove('dark');
        root.classList.add('light');
      }
    } else {
      root.classList.remove('dark');
      root.classList.add('light');
    }
    localStorage.setItem('theme', selectedTheme);
  };
  

  // Function to handle theme change
  const handleThemeChange = (selectedTheme) => {
    setTheme(selectedTheme);
    applyTheme(selectedTheme);
  };

  return (
    <Modal backdrop="blur" isOpen={isOpen} onClose={onClose} isDismissable={false}>
      <ModalContent>
        {(onClose) => (
          <>
            <ModalHeader className="flex flex-col gap-1">My Settings</ModalHeader>
            <ModalBody>
              {/* Theme dropdown */}
              <div className="flex justify-between items-center mb-4">
                <label className="text-sm">Theme</label>
                <Dropdown>
                  <DropdownTrigger>
                    <Button className="w-32">
                      {theme.charAt(0).toUpperCase() + theme.slice(1)}
                    </Button>
                  </DropdownTrigger>
                  <DropdownMenu>
                    <DropdownItem onClick={() => handleThemeChange('light')}>
                      Light
                    </DropdownItem>
                    <DropdownItem onClick={() => handleThemeChange('dark')}>
                      Dark
                    </DropdownItem>
                    <DropdownItem onClick={() => handleThemeChange('system')}>
                      System
                    </DropdownItem>
                  </DropdownMenu>
                </Dropdown>
              </div>

              <Tooltip content="The numerical value representing the degree of randomness in the responses generated by Large Language Models.">
                <Slider
                  label="Temperature"
                  step={0.01}
                  maxValue={1}
                  minValue={0}
                  defaultValue={0.7}
                  value={temperature}
                  className="max-w-md"
                  onChange={(value) => {
                    setTemperature(value);
                    localStorage.setItem("temperature", value);
                  }}
                />
              </Tooltip>
              <Input
                type="number"
                labelPlacement="outside"
                label="History"
                placeholder="10"
                isInvalid={history < 0 || history > 30}
                value={history}
                min={10}
                max={30}
                description="The number of previous messages to consider when generating a response. Value must be between 0 and 30."
                className="max-w-md"
                onChange={(e) => {
                  const value = e.target.value;
                  if (value < 0 || value > 30) return;
                  setHistory(value);
                  localStorage.setItem("history", value);
                }}
              />
            </ModalBody>
            <ModalFooter>
              <Button color="danger" variant="light" onPress={onClose}>
                Close
              </Button>
            </ModalFooter>
          </>
        )}
      </ModalContent>
    </Modal>
  );
};
